version: "3.0"

set: ['e', 'u', 'pipefail']
shopt: ['globstar']

dotenv: ['.env']

env:
  TLD:
    sh: "echo {{.TASKFILE_DIR}}"              # absolute path
    # sh: "basename ${{.TASKFILE_DIR}}"       # directory name
  COMPOSE_FILE: docker-compose.yml
  NETWORK: app-tier

vars:

tasks:
  print:
    - |
      echo -e "TLD:\t\t$TLD"
      echo -e "REGISTRY_URL:\t$REGISTRY_URL"
      echo -e "USER_NAME:\t$USER_NAME"
      echo -e "SERVICE:\t$SERVICE"

  default:
    desc: "Default task"
    cmds:
      - task --list

  all:
    desc: "Run all tasks"
    deps:
      - enable_registry
      - build
      - push

  # TODO: add conditional to login differently based on registry
  login:
    desc: "Login to the registry"
    run: once
    cmds:
      - echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${USER_NAME}" --password-stdin

  net:
    desc: "Create docker network"
    cmds:
      - |
        docker network create \
        --driver bridge \
        {{.NETWORK}}

  up:
    desc: "Start the project with docker-compose"
    cmds:
      - |
        docker compose -f {{.COMPOSE_FILE}} up -d \
        --build \
        --remove-orphans

  exec:
    desc: "Interactive shell for running container"
    cmds:
      - docker exec -it ${SERVICE}-app bash

  logs:
    desc: "Show logs for running container services"
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} logs -tf

  stop:
    desc: "Stop the project with docker-compose"
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} stop

  down:
    desc: "Stop and remove containers, networks, images, and volumes with docker-compose"
    cmds:
      - |
        docker compose -f {{.COMPOSE_FILE}} down \
        --volumes \
        --rmi all

  build:
    desc: "Build the docker image"
    cmds:
      - |
        docker buildx build \
        -t "${REGISTRY_URL}/${USER_NAME}/${SERVICE}:latest" \
        --load \
        "{{.TLD}}"

  build-clean:
    desc: "Build the docker image without cache"
    cmds:
      - |
        docker buildx build \
        --no-cache \
        -t "${REGISTRY_URL}/${USER_NAME}/${SERVICE}:latest" \
        --load \
        "{{.TLD}}"

  push:
    desc: "Push the docker image to the registry"
    deps:
      - build
      - login
    cmds:
      - docker push "${REGISTRY_URL}/${USER_NAME}/${SERVICE}"

  prune:
    desc: "Prune docker"
    cmds:
      - docker system prune --all --force
      - docker buildx builder prune --all --force
